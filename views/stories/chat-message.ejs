<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chat with <%= receiverUser.username %>
    </title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.1/moment.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/emoji-picker-element@1.12.0/index.js" type="module"></script>
    <style>
        body {
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
        }

        .message-bubble {
            max-width: 80%;
            word-wrap: break-word;
        }

        .typing-indicator {
            display: inline-block;
        }

        .typing-indicator span {
            height: 8px;
            width: 8px;
            float: left;
            margin: 0 1px;
            background-color: #3b82f6;
            display: block;
            border-radius: 50%;
            opacity: 0.4;
            animation: typing 1s infinite;
        }

        .typing-indicator span:nth-of-type(1) {
            animation-delay: 0s;
        }

        .typing-indicator span:nth-of-type(2) {
            animation-delay: 0.2s;
        }

        .typing-indicator span:nth-of-type(3) {
            animation-delay: 0.4s;
        }

        @keyframes typing {
            0% {
                opacity: 0.4;
                transform: scale(1);
            }

            50% {
                opacity: 1;
                transform: scale(1.2);
            }

            100% {
                opacity: 0.4;
                transform: scale(1);
            }
        }

        .date-header {
            position: relative;
            text-align: center;
            margin: 1rem 0;
        }

        .date-header span {
            background-color: #f8fafc;
            padding: 0.25rem 0.75rem;
            border-radius: 9999px;
            font-size: 0.75rem;
            color: #64748b;
            box-shadow: 0 1px 2px rgba(0, 0, 0, 0.05);
        }

        .online-dot {
            width: 10px;
            height: 10px;
            background-color: #10b981;
            border-radius: 50%;
            position: absolute;
            bottom: 0;
            right: 0;
            border: 2px solid white;
        }

        .emoji-picker {
            position: absolute;
            bottom: 70px;
            left: 10px;
            z-index: 50;
        }

        .input-container {
            transition: all 0.3s ease;
        }

        .input-container.typing {
            transform: translateY(-50px);
        }
    </style>
</head>

<body class="bg-gray-100">
    <div class="max-w-md mx-auto bg-white h-screen flex flex-col">
        <!-- Chat Header -->
        <div class="bg-gray-50 p-3 border-b border-gray-200 flex items-center justify-between">
            <div class="flex items-center">
                <a href="/chat" class="mr-2 p-2 text-gray-500 hover:text-blue-500 md:hidden">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                        <path fill-rule="evenodd"
                            d="M9.707 16.707a1 1 0 01-1.414 0l-6-6a1 1 0 010-1.414l6-6a1 1 0 011.414 1.414L5.414 9H17a1 1 0 110 2H5.414l4.293 4.293a1 1 0 010 1.414z"
                            clip-rule="evenodd" />
                    </svg>
                </a>
                <div class="relative">
                    <img src="<%= receiverUser.image.url %>" alt="<%= receiverUser.username %>"
                        class="w-10 h-10 rounded-full object-cover">
                    <!-- <% if (receiverUser.isOnline) { %>
                        <div class="online-dot"></div>
                        <% } %>  -->
                </div>
                <div class="ml-3">
                    <span class="font-semibold">
                        <%= receiverUser.username %>
                    </span>
                    <p class="text-xs text-gray-500" id="userStatus">
                         <!-- <% if (receiverUser.isOnline) { %>
                            Online
                            <% } else { %>
                                Last seen <%= moment(receiverUser.lastSeen).fromNow() %>
                                    <% } %> -->
                    </p>
                </div>
            </div>


        </div>

        <!-- Messages Area -->
        <div id="messages" class="flex-1 p-4 overflow-y-auto bg-gray-50">
            <% const groupedMessages={}; %>
                <% messages.forEach(msg=> { %>
                    <% const date=msg.date; %>
                        <% if (!groupedMessages[date]) { %>
                            <% groupedMessages[date]=[]; %>
                                <% } %>
                                    <% groupedMessages[date].push(msg); %>
                                        <% }) %>

                                            <% Object.keys(groupedMessages).forEach(date=> { %>
                                                <div class="date-header">
                                                    <span>
                                                        <%= moment(date).format('MMMM Do YYYY') %>
                                                    </span>
                                                </div>
                                                <% groupedMessages[date].forEach(msg=> { %>
                                                    <% if (msg.sender.equals(user._id)) { %>
                                                        <!-- Outgoing message -->
                                                        <div class="flex items-end justify-end mb-3">
                                                            <div class="flex flex-col space-y-1 max-w-xs">
                                                                <div
                                                                    class="px-4 py-2 bg-blue-500 text-white rounded-lg rounded-br-none">
                                                                    <%= msg.message %>
                                                                </div>
                                                                <div
                                                                    class="flex items-center justify-end space-x-1 text-xs text-gray-500">
                                                                    <span>
                                                                        <%= moment(msg.timestamp).format('h:mm A') %>
                                                                    </span>
                                                                 
                                                                </div>
                                                            </div>
                                                        </div>
                                                        <% } else { %>
                                                            <!-- Incoming message -->
                                                            <div class="flex items-end mb-3">
                                                                <div class="flex flex-col space-y-1 max-w-xs">
                                                                    <div
                                                                        class="px-4 py-2 bg-gray-200 text-gray-800 rounded-lg rounded-bl-none">
                                                                        <%= msg.message %>
                                                                    </div>
                                                                    <div class="text-xs text-gray-500">
                                                                        <%= moment(msg.timestamp).format('h:mm A') %>
                                                                    </div>
                                                                </div>
                                                            </div>
                                                            <% } %>
                                                                <% }) %>
                                                                    <% }) %>

                                                                        <!-- Typing indicator -->
                                                                        <div id="typingIndicator" class="hidden mb-3">
                                                                            <div class="flex items-end">
                                                                                <div
                                                                                    class="flex flex-col space-y-1 max-w-xs">
                                                                                    <div
                                                                                        class="px-4 py-2 bg-gray-200 text-gray-800 rounded-lg rounded-bl-none">
                                                                                        <div class="typing-indicator">
                                                                                            <span></span>
                                                                                            <span></span>
                                                                                            <span></span>
                                                                                        </div>
                                                                                    </div>
                                                                                </div>
                                                                            </div>
                                                                        </div>
        </div>

        <!-- Message Input -->
        <div id="inputContainer" class="input-container bg-white border-t border-gray-200 p-3">
            <form class="relative" action="/chat/<%=receiverId %>" method="post">
                <div class="absolute left-3 top-1/2 transform -translate-y-1/2">
                    <button type="button" id="emojiButton"
                        class="p-2 text-gray-500 hover:text-blue-500 focus:outline-none">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                            <path fill-rule="evenodd"
                                d="M10 18a8 8 0 100-16 8 8 0 000 16zM7 9a1 1 0 100-2 1 1 0 000 2zm7-1a1 1 0 11-2 0 1 1 0 012 0zm-.464 5.535a1 1 0 10-1.415-1.414 3 3 0 01-4.242 0 1 1 0 00-1.415 1.414 5 5 0 007.072 0z"
                                clip-rule="evenodd" />
                        </svg>
                    </button>
                </div>

                <input type="text" name="message" id="messageInput" placeholder="Type a message"
                    class="w-full bg-gray-100 rounded-full py-2 px-12 focus:outline-none focus:bg-white focus:ring-2 focus:ring-blue-400">

                <div class="absolute right-3 top-1/2 transform -translate-y-1/2">
                    <button type="submit"
                        class="bg-blue-500 text-white p-2 rounded-full hover:bg-blue-600 focus:outline-none">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                            <path
                                d="M10.894 2.553a1 1 0 00-1.788 0l-7 14a1 1 0 001.169 1.409l5-1.429A1 1 0 009 15.571V11a1 1 0 112 0v4.571a1 1 0 00.725.962l5 1.428a1 1 0 001.17-1.408l-7-14z" />
                        </svg>
                    </button>
                </div>
            </form>

            <!-- Emoji Picker -->
            <emoji-picker id="emojiPicker" class="emoji-picker hidden"></emoji-picker>
        </div>
    </div>

    <script src="/socket.io/socket.io.js"></script>

    <script type="module">
        import 'https://cdn.jsdelivr.net/npm/emoji-picker-element@^1/index.js';

        const socket = io();
        const senderId = "<%= user._id %>";
        const receiverId = "<%= receiverId %>";
        const messagesContainer = document.getElementById('messages');
        const messageInput = document.getElementById('messageInput');
        const typingIndicator = document.getElementById('typingIndicator');
        const emojiButton = document.getElementById('emojiButton');
        const emojiPicker = document.getElementById('emojiPicker');
        const userStatus = document.getElementById('userStatus');

        // Initialize emoji picker
        emojiButton.addEventListener('click', (e) => {
            e.stopPropagation();
            emojiPicker.classList.toggle('hidden');
        });

        document.addEventListener('click', () => {
            emojiPicker.classList.add('hidden');
        });

        emojiPicker.addEventListener('emoji-click', (event) => {
            const cursorPos = messageInput.selectionStart;
            const textBefore = messageInput.value.substring(0, cursorPos);
            const textAfter = messageInput.value.substring(cursorPos);

            messageInput.value = textBefore + event.detail.unicode + textAfter;
            messageInput.focus();
            messageInput.selectionStart = cursorPos + event.detail.unicode.length;
            messageInput.selectionEnd = cursorPos + event.detail.unicode.length;
        });

        
        socket.emit('authenticate', senderId);

        messagesContainer.scrollTop = messagesContainer.scrollHeight;

        // Handle form submission
        document.querySelector('form').addEventListener('submit', async (e) => {
            e.preventDefault();
            const message = messageInput.value.trim();
            if (message) {
                socket.emit('sendMessage', {
                    sender: senderId,
                    receiver: receiverId,
                    message
                });
                messageInput.value = '';
            }
        });

        // Handle incoming messages
        socket.on('newMessage', (message) => {
            if ((message.sender === senderId && message.receiver === receiverId) ||
                (message.sender === receiverId && message.receiver === senderId)) {

                renderMessage(message);
                messagesContainer.scrollTop = messagesContainer.scrollHeight;
  
                // If message is incoming, mark as seen
                if (message.sender === receiverId) {
                    socket.emit('markAsSeen', {
                        sender: receiverId,
                        receiver: senderId
                    });
                }
            }
        });

        // Handle messages seen notification
        socket.on('messagesSeen', ({ receiver }) => {
            if (receiver === senderId) {
                // Update all outgoing messages to "seen" status
                document.querySelectorAll('.outgoing-message').forEach(msgEl => {
                    const statusIcon = msgEl.querySelector('.message-status');
                    if (statusIcon) {
                        statusIcon.innerHTML = `
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-blue-500" viewBox="0 0 20 20" fill="currentColor">
                            <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd" />
                        </svg>
                    `;
                    }
                });
            }
        });

        // Typing indicators with username
        let typingTimeout;
        messageInput.addEventListener('input', () => {
            socket.emit('typing', {
                sender: senderId,
                receiver: receiverId,
                username: "<%= user.username %>"
            });

            clearTimeout(typingTimeout);
            typingTimeout = setTimeout(() => {
                socket.emit('stopTyping', {
                    sender: senderId,
                    receiver: receiverId
                });
            }, 2000);
        });

        socket.on('typing', ({ sender, username }) => {
            if (sender === receiverId) {
                typingIndicator.classList.remove('hidden');
                typingIndicator.querySelector('.typing-text').textContent = `${username} is typing...`;
                messagesContainer.scrollTop = messagesContainer.scrollHeight;
            }
        });

        socket.on('stopTyping', ({ sender }) => {
            if (sender === receiverId) {
                typingIndicator.classList.add('hidden');
            }
        });

        // User status updates
        socket.on('userStatus', ({ userId, isOnline, lastSeen }) => {
            if (userId === receiverId) {
                if (isOnline) {
                    userStatus.textContent = 'Online';
                } else {
                    userStatus.textContent = 'Offline';

                    userStatus.textContent = `Last seen ${new Date(lastSeen).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}`;
                }
            }
        });

        // Render a single message
        function renderMessage(message) {
            const isOutgoing = message.sender === senderId;
            const time = new Date(message.timestamp).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });

            let statusIcon = '';
            if (isOutgoing) {
                statusIcon = `
                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 ${message.status === 'seen' ? 'text-blue-500' : 'text-gray-400'}" viewBox="0 0 20 20" fill="currentColor">
                    <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd" />
                </svg>
            `;
            }

            const messageElement = document.createElement('div');
            messageElement.className = `flex items-end ${isOutgoing ? 'justify-end' : ''} mb-3 ${isOutgoing ? 'outgoing-message' : ''}`;
            messageElement.innerHTML = `
            <div class="flex flex-col space-y-1 max-w-xs">
                <div class="px-4 py-2 ${isOutgoing ? 'bg-blue-500 text-white rounded-br-none' : 'bg-gray-200 text-gray-800 rounded-bl-none'} rounded-lg">
                    ${message.message}
                </div>
                <div class="flex items-center ${isOutgoing ? 'justify-end' : ''} space-x-1 text-xs text-gray-500">
                    <span>${time}</span>
                    ${isOutgoing ? `<span class="message-status">${statusIcon}</span>` : ''}
                </div>
            </div>
        `;

            messagesContainer.insertBefore(messageElement, typingIndicator);
        }

        // Mark existing messages as seen when chat opens
        socket.emit('markAsSeen', {
            sender: receiverId,
            receiver: senderId
        });


    </script>

    <script>
     

        // When the chat loads initially, check the status
        document.addEventListener('DOMContentLoaded', () => {
            socket.emit('getUserStatus', { userId: receiverId });
        });

        socket.on('userStatusResponse', ({ userId, isOnline, lastSeen }) => {
            if (userId === receiverId) {
                const statusElement = document.getElementById('userStatus');
                const onlineDot = document.querySelector('.online-dot');

                if (isOnline) {
                    statusElement.textContent = 'Online';
                    if (onlineDot) onlineDot.style.display = 'block';
                } else {
                    statusElement.textContent = `Last seen ${moment(lastSeen).fromNow()}`;
                    if (onlineDot) onlineDot.style.display = 'none';
                }
            }
        });


    </script>
</body>

</html>