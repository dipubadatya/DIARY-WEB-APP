<!-- <!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Writte</title>
    <link rel="stylesheet" href="/css/writer.css">
    <script src="https://cdn.tailwindcss.com"></script>

</head>

<body>
    <div id="main">
        <div id="writer-container">
            <form action="/stories" method="post" enctype="multipart/form-data" ">

                <div class=" writer-header">
                <a href="/stories">
                    <h1>Diary</h1>
                </a>
                <div class="wrtr-hd-input">
                    <input type="text" name="title" placeholder=" story title" class="story-title" id="my-editor"
                        required>

                    <input type="file" name="image" accept="image/jpeg, image/png, image/jpg" placeholder="story cover img" class="story-img" required>

                </div>
                <button
                    class="inline-flex h-12 animate-shimmer items-center justify-center rounded-md border border-slate-800 bg-[linear-gradient(110deg,#000103,45%,#1e2631,55%,#000103)] bg-[length:200%_100%] px-6 font-medium text-slate-400 transition-colors focus:outline-none focus:ring-2 focus:ring-slate-400 focus:ring-offset-2 focus:ring-offset-slate-50">publish</button>

        </div>
        <div class="writer-text" class="min-h-[300px] border border-gray-300 p-4 rounded-lg focus:outline-none">
            <textarea name="story" placeholder="write your story..."></textarea>
        </div>



        </form>


    </div>

    

 

</body>

</html> -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Writte</title>
    <link rel="stylesheet" href="/css/writer.css">
    <link
    href="https://cdn.jsdelivr.net/npm/remixicon@4.5.0/fonts/remixicon.css"
    rel="stylesheet"
/>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        /* Improved styling for voice button and controls */
        .voice-controls {
            display: flex;
            align-items: center;
            margin: 15px 0;
            padding: 10px;
            background-color: #f8fafc;
            border-radius: 8px;
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
        }
        
        .voice-button {
            background-color: #1e293b;
            color: white;
            border: none;
            border-radius: 50%;
            width: 48px;
            height: 48px;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 2px 5px rgba(0,0,0,0.2);
        }
        
        .voice-button:hover {
            background-color: #334155;
            transform: translateY(-2px);
        }
        
        .voice-button:active {
            transform: translateY(1px);
        }
        
        .voice-button.active {
            background-color: #dc2626;
            animation: pulse 1.5s infinite;
        }
        
        @keyframes pulse {
            0% { transform: scale(1); box-shadow: 0 0 0 0 rgba(220, 38, 38, 0.7); }
            70% { transform: scale(1.1); box-shadow: 0 0 0 10px rgba(220, 38, 38, 0); }
            100% { transform: scale(1); box-shadow: 0 0 0 0 rgba(220, 38, 38, 0); }
        }
        
        .voice-status {
            margin-left: 15px;
            font-size: 15px;
            color: #475569;
            flex-grow: 1;
            padding-right: 10px;
        }
        
        .voice-instructions {
            font-size: 13px;
            color: #94a3b8;
            margin-top: 5px;
        }
        
        .writer-text textarea {
            width: 100%;
            min-height: 300px;
            padding: 15px;
            border: 1px solid #e2e8f0;
            border-radius: 0.5rem;
            outline: none;
            font-size: 16px;
            line-height: 1.6;
            transition: border-color 0.3s ease;
        }
        
        .writer-text textarea:focus {
            /* border-color: #64748b; */
            box-shadow: 0 0 0 2px rgba(100, 116, 139, 0.1);
        }
        
        /* Keyboard shortcut display */
        .keyboard-shortcut {
            display: inline-flex;
            align-items: center;
            justify-content: center;
            background-color: #e2e8f0;
            color: #475569;
            border-radius: 4px;
            padding: 2px 6px;
            font-size: 12px;
            margin-left: 10px;
        }

            /* Style for image preview */
            .image-preview {
          
           

            width: 100%;
        height: 200px;
            border-radius: 8px;
            box-shadow: 0 1px 5px rgba(0,0,0,0.1);
            object-fit: contain;
            object-position: center;
        }

    </style>
</head>
<body>
    <div id="main">
        <div id="writer-container">
            <form action="/stories" method="post" enctype="multipart/form-data">
                <div class="writer-header">
                    <a href="/stories">
                        <h1>Diary</h1>
                    </a>
                    <div class="wrtr-hd-input">
                        <input type="text" name="title" placeholder="story title" class="story-title" id="my-editor" required>
                        <input type="file" name="image" accept="image/jpeg, image/png, image/jpg" placeholder="story cover img" id="image-input"  class="story-img" required>
                    </div>
                   
                    <button class="inline-flex h-12 animate-shimmer items-center justify-center rounded-md border border-slate-800 bg-[linear-gradient(110deg,#000103,45%,#1e2631,55%,#000103)] bg-[length:200%_100%] px-6 font-medium text-slate-400 transition-colors focus:outline-none focus:ring-2 focus:ring-slate-400 focus:ring-offset-2 focus:ring-offset-slate-50">publish</button>
                   
                </div>
              
                <div id="image-preview-container" style="display:none; ">
                    <img id="image-preview" class="image-preview" src="" alt="Image preview">
                </div>
                <!-- Improved voice control section -->
                <div class="voice-controls">
                    <button type="button" id="voice-button" class="voice-button" title="Start/Stop Voice Input">
                        <i class="ri-user-voice-line"></i>
                    </button>
                    <div>
                        <div id="voice-status" class="voice-status">Click microphone to start voice input</div>
                        <!-- <div class="voice-instructions ml-2">Speak clearly and your words will appear where the cursor is positioned</div>////////////////////// -->
                    </div>
                   
                </div>
             
                <div class="writer-text">
                    <textarea  name="story" id="story-textarea" placeholder="write your story..."></textarea>
                </div>
            </form>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const voiceButton = document.getElementById('voice-button');
            const voiceStatus = document.getElementById('voice-status');
            const storyTextarea = document.getElementById('story-textarea');
            const titleInput = document.getElementById('my-editor');
            
            // Check if browser supports speech recognition
            if (!('webkitSpeechRecognition' in window) && !('SpeechRecognition' in window)) {
                voiceStatus.textContent = "Voice input not supported in your browser";
                voiceButton.disabled = true;
                return;
            }
            
            // Initialize speech recognition
            const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
            const recognition = new SpeechRecognition();
            
            // Configure recognition
            recognition.continuous = true;
            recognition.interimResults = true;
            recognition.lang = 'en-US';
            
            let isListening = false;
            
            // Handle recognition results
            recognition.onresult = function(event) {
                let interimTranscript = '';
                let finalTranscript = '';
                
                for (let i = event.resultIndex; i < event.results.length; i++) {
                    const transcript = event.results[i][0].transcript;
                    
                    if (event.results[i].isFinal) {
                        finalTranscript += transcript + ' ';
                    } else {
                        interimTranscript += transcript;
                    }
                }
                
                // Show interim results
                if (interimTranscript) {
                    voiceStatus.textContent = "Listening: " + interimTranscript;
                }
                
                // Insert final transcript into the focused element or default to story textarea
                if (finalTranscript) {
                    const activeElement = document.activeElement;
                    
                    if (activeElement === titleInput) {
                        // Insert into title input
                        const currentValue = titleInput.value;
                        const cursorPosition = titleInput.selectionStart;
                        titleInput.value = currentValue.substring(0, cursorPosition) + 
                                           finalTranscript + 
                                           currentValue.substring(titleInput.selectionEnd);
                        
                        // Move cursor to end of inserted text
                        titleInput.selectionStart = cursorPosition + finalTranscript.length;
                        titleInput.selectionEnd = cursorPosition + finalTranscript.length;
                    } else {
                        // Default to story textarea
                        const currentValue = storyTextarea.value;
                        const cursorPosition = storyTextarea.selectionStart;
                        storyTextarea.value = currentValue.substring(0, cursorPosition) + 
                                              finalTranscript + 
                                              currentValue.substring(storyTextarea.selectionEnd);
                        
                        // Move cursor to end of inserted text
                        storyTextarea.selectionStart = cursorPosition + finalTranscript.length;
                        storyTextarea.selectionEnd = cursorPosition + finalTranscript.length;
                        
                        // Ensure the textarea is focused
                        storyTextarea.focus();
                    }
                }
            };
            
            // Handle recognition errors
            recognition.onerror = function(event) {
                console.error('Speech recognition error:', event.error);
                
                if (event.error === 'no-speech') {
                    voiceStatus.textContent = "No speech detected. Try again.";
                } else if (event.error === 'audio-capture') {
                    voiceStatus.textContent = "No microphone detected. Please connect a microphone.";
                } else if (event.error === 'not-allowed') {
                    voiceStatus.textContent = "Microphone access denied. Please allow microphone access.";
                } else {
                    voiceStatus.textContent = "Error: " + event.error;
                }
                
                // Try to restart if we were listening
                if (isListening) {
                    try {
                        recognition.stop();
                        setTimeout(() => {
                            if (isListening) recognition.start();
                        }, 1000);
                    } catch (e) {
                        console.error('Error restarting recognition:', e);
                    }
                }
            };
            
            // Handle end of recognition
            recognition.onend = function() {
                if (isListening) {
                    // Restart if we're supposed to be listening
                    try {
                        recognition.start();
                    } catch (e) {
                        console.error('Error restarting recognition:', e);
                        isListening = false;
                        voiceButton.classList.remove('active');
                        voiceStatus.textContent = "Voice input stopped due to error";
                    }
                } else {
                    voiceButton.classList.remove('active');
                    voiceStatus.textContent = "Voice input stopped";
                }
            };
            
            // Toggle voice recognition
            function toggleVoiceRecognition() {
                if (isListening) {
                    // Stop listening
                    recognition.stop();
                    isListening = false;
                    voiceButton.classList.remove('active');
                    voiceStatus.textContent = "Voice input stopped";
                } else {
                    // Start listening
                    try {
                        recognition.start();
                        isListening = true;
                        voiceButton.classList.add('active');
                        voiceStatus.textContent = "Listening...";
                        
                        // Focus the story textarea if nothing is focused
                        if (document.activeElement !== titleInput) {
                            storyTextarea.focus();
                        }
                    } catch (e) {
                        console.error('Error starting recognition:', e);
                        voiceStatus.textContent = "Error starting voice input. Try again.";
                    }
                }
            }
            
            // Click event listener
            voiceButton.addEventListener('click', toggleVoiceRecognition);
            
            // Keyboard shortcut (Alt+V)
            document.addEventListener('keydown', function(event) {
                if (event.altKey && event.key === 'v') {
                    event.preventDefault();
                    toggleVoiceRecognition();
                }
            });
        });
    </script>
       <script>
        // JavaScript for image preview
        const imageInput = document.getElementById('image-input');
        const imagePreviewContainer = document.getElementById('image-preview-container');
        const imagePreview = document.getElementById('image-preview');

        imageInput.addEventListener('change', function(event) {
            const file = event.target.files[0];
            if (file && file.type.startsWith('image/')) {
                const reader = new FileReader();
                reader.onload = function(e) {
                    imagePreviewContainer.style.display = 'block'; // Show preview
                    imagePreview.src = e.target.result; // Set the image source to the file result
                };
                reader.readAsDataURL(file); // Read the file as data URL
            } else {
                imagePreviewContainer.style.display = 'none'; // Hide preview if the file isn't an image
            }
        });
    </script>
</body>
</html>